{"remainingRequest":"/Users/garethii/Documents/GitHub/citedrive-docs/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/garethii/Documents/GitHub/citedrive-docs/node_modules/@docusaurus/theme-classic/lib-next/theme/CodeBlock/index.js","dependencies":[{"path":"/Users/garethii/Documents/GitHub/citedrive-docs/node_modules/@docusaurus/theme-classic/lib-next/theme/CodeBlock/index.js","mtime":1619687965941},{"path":"/Users/garethii/Documents/GitHub/citedrive-docs/node_modules/cache-loader/dist/cjs.js","mtime":1617304729401},{"path":"/Users/garethii/Documents/GitHub/citedrive-docs/node_modules/babel-loader/lib/index.js","mtime":1608694903229}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}